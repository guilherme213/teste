-- Configurações
local FOV = FOV or 50
local HIT_PARTS = HIT_PARTS or { "Head", "Torso" }
local HIT_CHANCES = { Head = 40, Torso = 60 }
local MAX_DISTANCE = 300 -- Distância máxima de verificação (ajuste conforme necessário)

-- Restante do código (sem alterações)

local function isPlayerVisible(hitPart)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = { localPlayer.Character }

    local raycastResult = workspace:Raycast(
        camera.CFrame.Position,
        (hitPart.Position - camera.CFrame.Position).Unit * MAX_DISTANCE,
        raycastParams
    )

    if raycastResult and raycastResult.Instance and raycastResult.Instance:IsDescendantOf(hitPart.Parent) then
        return true
    end

    return false
end

local function getClosest()
    local closestPart
    local closestAngle = math.rad(FOV * 0.5)

    for _, character in ipairs(getEnemyTeam():GetChildren()) do
        local hitPartName = HIT_PARTS[math.random(1, #HIT_PARTS)]
        local hitChance = HIT_CHANCES[hitPartName]
        local shouldHit = math.random(1, 100) <= hitChance

        if shouldHit then
            local hitPart = character:FindFirstChild(hitPartName)
            if hitPart and isPlayerVisible(hitPart) then
                local vector = (hitPart.Position - camera.CFrame.Position).Unit
                local angle = math.acos(camera.CFrame.LookVector:Dot(vector))
                if angle < closestAngle then
                    closestPart = hitPart
                    closestAngle = angle
                end
            end
        end
    end

    return closestPart
end
